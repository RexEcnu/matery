<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo 博客部署到腾讯云服务器</title>
      <link href="/2021/09/10/server-deploy/"/>
      <url>/2021/09/10/server-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>Github pages 支持部署静态网站，但国内访问比较慢。暑假买了腾讯云服务器，索性把网站部署上来，即可以加快访问速度，还支持百度收录。</p><blockquote><p>原文链接<br>腾讯云：<a href="https://cloud.tencent.com/developer/article/1004587">在 Ubuntu 14.04 服务器上部署 Hexo 博客</a></p></blockquote><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>除了闷头专研技术之外，程序员还需要不断地写作进行技术积累，写博客是其中最重要的方式之一。商业博客平台不少，但是更符合程序员背景的方案，是自己开发一个博客平台或者使用开源的博客平台。</p><p>开源的博客平台多如牛毛，而且不乏优秀之作，如 Hexo、Octopress、Jekyll、Wordpress。本系列文章将分享如何利用各种博客引擎在云端搭建属于自己的个人博客。今天是第一篇，介绍如何在 Ubuntu 14.04 上部署 Hexo 博客。</p><p>Hexo 是用 Node.js 开发的一个静态站点生成器（Static Site Generator），支持 Markdown 语法写作，有着强大的插件系统，而且性能优异。阅读不少技术社区分享的文章时，看到国内不少同学都有在用这个引擎，看来「市场占有率」不低。</p><p>本文将介绍如何在一台 Ubuntu 系统的 CVM 云服务器上快速部署 Hexo 博客站点并通过云服务器上的私有 Git 仓库部署到 Web 服务器目录下。</p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>如果想跟着本教程顺利完成 Hexo 博客的搭建，需要具备以下条件：</p><ul><li>一台安装了 Ubuntu 系统的 CVM 云服务器。一般个人博客的流量都比较低，初期选择 1核 1GB内存类型的服务器即可，而且有不少免费试用的时间。</li><li>在本地电脑上安装 Node.js 和 npm，建议谷歌相应关键词了解具体步骤。</li></ul><p>在云服务器上安装 Git 和 Nginx 两个必备的软件包。Git 用于版本管理和部署，Nginx 用于静态博客托管。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git nginx -y</span><br></pre></td></tr></table></figure><h1 id="本地设置"><a href="#本地设置" class="headerlink" title="本地设置"></a>本地设置</h1><p>hexo 安装及初始化参看<a href="https://www.wzhecnu.xyz/2021/07/19/blog/hexo-01-kuang-jia-pian/">这篇</a>。</p><h1 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h1><p>完成本地端的操作之后，暂时回到服务器的配置。在下面的操作之前，请确保已经购买了一台云服务器，并且能够以 ubuntu 用户身份正常登陆。</p><p>在这部分，要完成以下件事情：</p><ul><li>为本地的 hexo_blog 配置一个部署静态文件的远程仓库。</li><li>配置 Nginx 托管博客文件目录。</li><li>配置远程仓库自动更新到博客文件目录的钩子。</li></ul><p>登录服务器和执行命令可使用 putty，安装参考<a href="https://www.wzhecnu.xyz/2021/08/20/server/01-build-server/">这篇</a>。</p><h2 id="创建私有-Git-仓库"><a href="#创建私有-Git-仓库" class="headerlink" title="创建私有 Git 仓库"></a>创建私有 Git 仓库</h2><p>在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库（bare repo）。如果没有 /var/repo 目录，需要先创建；然后修改目录的所有权和用户权限，之后 ubuntu 用户都具备 /var/repo 目录下所有新生成的目录和文件的权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/repo/ # 创建文件夹</span><br><span class="line">sudo chown -R $USER:$USER /var/repo/ # chown 用法后续补充</span><br><span class="line">sudo chmod -R 755 /var/repo/ </span><br></pre></td></tr></table></figure><p>然后执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo/</span><br><span class="line">git init --bare hexo_static.git # 初始化 git 仓库</span><br></pre></td></tr></table></figure><h2 id="配置-Nginx-托管文件目录"><a href="#配置-Nginx-托管文件目录" class="headerlink" title="配置 Nginx 托管文件目录"></a>配置 Nginx 托管文件目录</h2><p>接下来，创建 /var/www/hexo 目录，用于 Nginx 托管。和上一步类似，这里也需要修改目录的所有权和权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/hexo</span><br><span class="line">sudo chown -R $USER:$USER /var/www/hexo</span><br><span class="line">sudo chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p>然后，修改 Nginx 的 default 设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>定位下边内容并修改：将 root 指令指向 /var/www/hexo 目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line">    root /var/www/hexo; # 需要修改的部分</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存并退出文件。如果以后购买并备案域名之后，可以再将配置中的 default_server 修改为你的域名。具体参考 CSDN：<a href="https://blog.csdn.net/a_helloword/article/details/84316291">使用nginx配置二级域名</a>。</p><p>最后，重启 Nginx 服务，使得改动生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>做完这一步之后，你去访问服务器的 IP 时，应该还是会报错的，因为 /var/www/hexo 目录是空的。</p><h2 id="创建-Git-钩子"><a href="#创建-Git-钩子" class="headerlink" title="创建 Git 钩子"></a>创建 Git 钩子</h2><p>接下来，在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo。</p><p>在自动生成的 hooks 目录下创建一个新的钩子文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</span><br></pre></td></tr></table></figure><p>保存并退出文件，并让该文件变为可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /var/repo/hexo_static.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>至此，服务端的配置基本结束。</p><h1 id="完成本地-Hexo-配置"><a href="#完成本地-Hexo-配置" class="headerlink" title="完成本地 Hexo 配置"></a>完成本地 Hexo 配置</h1><p>在这一部分的操作中，我们将完成以下任务：</p><ul><li>修改 Hexo 配置中的 URL 和默认文章版式</li><li>新建博客草稿并发布</li><li>配置自动部署到服务器端的 hexo_static 裸仓库<h2 id="修改-Hexo-部分默认配置"><a href="#修改-Hexo-部分默认配置" class="headerlink" title="修改 Hexo 部分默认配置"></a>修改 Hexo 部分默认配置</h2>进入 hexo_blog 目录，其中，_config.yml 为 Hexo 的主配置文件。我们首先修改博客的 URL 地址，将箭头部分改为域名或服务器的公网地址。</li></ul><blockquote><p>注： 原文这里将 <code>default_layout</code> 的参数修改为 <code>draft</code>，但好像不是必要。</p></blockquote><!-- 接下来，修改 default_layout，该字段位于在 Writing 部分。将其从 post 修改为 draft ，表示每篇博文默认都是草稿，必须经过发布之后才能在博客站点上访问。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Writing</span><br><span class="line">new_post_name: :title.md # File name of new posts</span><br><span class="line">default_layout: draft # 原来的值是 post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br></pre></td></tr></table></figure><p>暂时保存并退出文件。在后继续进行配置。</p><p>3.2. 新建博客草稿并发布<br>这里简单演示通过 Hexo 新建博文草稿，并发布的过程。</p><p>执行如下命令，创建第一篇博文。</p><p>hexo new first-post<br>你会看到类似如下输出：</p><p>INFO  Created: ~\Workspace\Git\hexo_blog\source_drafts\first-post.md<br>在本地通过自己熟悉的编辑器，编辑博文。这里，我们把本文的内容写入第一篇博客中。</p><p>title: 在 Ubuntu 14.04 服务器上部署 Hexo 博客<br>tags:</p><ul><li>Ubuntu</li><li>Hexo<br>categories:</li><li>Hexo<br>comments: true<br>date: 2017-02-24 15:31:00</li></ul><hr><h2 id="以下为-Markdown-文章正文。"><a href="#以下为-Markdown-文章正文。" class="headerlink" title="以下为 Markdown 文章正文。"></a>以下为 Markdown 文章正文。</h2><p>然后，通过如下命令发布博客：</p><p>hexo publish first-post<br>输出类似下面这样：</p><p>INFO  Published: ~\Workspace\Git\hexo_blog\source_posts\first-post.md<br>博客推送到服务器之后，就可以在网站上访问了。 –&gt;</p><h2 id="通过-Git-部署"><a href="#通过-Git-部署" class="headerlink" title="通过 Git 部署"></a>通过 Git 部署</h2><p>到了这一步，可以说万事俱备，只欠东风了。这个东风，就是通过 Git 将 Hexo 生成的静态内容推送到服务器。</p><p>继续编辑 _config.yml 文件，找到 Deployment 部分，按照如下情况修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: &lt;用户名&gt;@&lt;公网地址&gt;:/var/repo/hexo_static</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>保存并退出文件。</p><p>输入 <code>hexo g &amp;&amp; hexo d</code> 生成并部署博客，期间会提示输入 ubuntu 用户的登录密码（如果没有设置 SSH 登录）。成功之后的输出大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> create mode 100644 tags/Node-js/index.html</span><br><span class="line"> create mode 100644 tags/Ubuntu/index.html</span><br><span class="line">Branch master set up to track remote branch master from ubuntu@139.199.170.173:/var/repo/hexo_static.</span><br><span class="line">To 139.199.170.173:/var/repo/hexo_static</span><br><span class="line"> * [new branch]      HEAD -&gt; master</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p>现在，我们在浏览器中打开公网地址，即可看到自己的博客网站了。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><blockquote><p>这部分内容没有尝试，有需要再弄。</p></blockquote><p>我们发现，Hexo 对 blockquote 标签的样式并不太美观，需要后续再调优。</p><h2 id="通过镜像快速部署"><a href="#通过镜像快速部署" class="headerlink" title="通过镜像快速部署"></a>通过镜像快速部署</h2><p>本文虽然将 Hexo 博客的大致部署过程明确地列出，但是对于部分初学用户来说可能还会显得较为复杂。如何利用 CVM 云服务器提供商（即腾讯云）的其他服务，快速让其他用户不必经过上面的步骤，快速进行部署呢？</p><p>在云计算中，与虚拟机相关的一个概念是镜像（Image）。用户通过镜像，可以一键启动多个配置一模一样的云服务器。我们这一步通过 CVM 的「制作系统镜像」功能，将 Hexo 博客的服务器端打包。</p><p>打包后的镜像，还可以上传到官方的服务市场，供所有用户使用；还可以直接共享给其他用户。</p><p>如果有用户希望使用该镜像，可在本文下方评论区留下自己的腾讯云账号（登录时使用的QQ号或邮箱）。</p><h2 id="镜像的使用"><a href="#镜像的使用" class="headerlink" title="镜像的使用"></a>镜像的使用</h2><p>镜像中已经设置好了服务端，通过镜像启动 CVM 云服务器之后，读者只需要根据本文第三部分「完成 Hexo 本地配置」中的步骤，设置好本地 Hexo 写作环境的部署地址和服务器 URL等参数即可。</p><p>这里有一点一定要注意，通过镜像启动云服务器时，务必重新设置密码或密钥，否则镜像的制作者有可能轻松地登录你的服务器。<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/20210912103600.png" alt="20210912103600"><br>不要选择上图中的方式安装。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文较为完整地介绍了 Hexo 博客的安装及初始化，服务端如何配置通过 Git 部署等。与其他教程不同，我们没有使用公开的 Github 等第三方服务，而是直接在服务器上创建了私有仓库。然后，通过 Git 钩子，将 Hexo 生成的博客静态文件，快速地推送到 Web 服务的托管目录。</p><p>由于 Hexo 是采用 Node.js 开发的，可能对于其他语言的学习者来说吸引力不大，因为后续自主二次开发难度较高。因此，后续笔者还将介绍其他语言的博客引擎，如用 Python 编写的 Lektor 和用 PHP 编写的 Wordpress 等。</p><p>敬请期待。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matery 主题介绍</title>
      <link href="/2021/09/10/theme-matery/"/>
      <url>/2021/09/10/theme-matery/</url>
      
        <content type="html"><![CDATA[<h1 id="唠唠闲话"><a href="#唠唠闲话" class="headerlink" title="唠唠闲话"></a>唠唠闲话</h1><p>惯例，新主题的第一篇是主题介绍和教程。Matery 是一个采用 Material Design 和响应式设计的 Hexo 博客主题。入手这一主题，主要是看到<a href="https://www.yshawlon.cn/">这篇博客</a>，整体风格非常不错。</p><p>同样地，官方介绍有的这里不细写，本篇记录实现新功能所做的修改。</p><blockquote><p><strong>参考链接</strong><br>官方：<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">博客主题 hexo-theme-matery 的介绍</a><br>shawlon：<a href="https://www.yshawlon.cn/hexo-ge-ren-bo-ke-zhi-bo-ke-zhu-ti-mei-hua.html">Hexo-个人之博客主题美化</a></p></blockquote><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin # 代码高亮</span><br><span class="line">npm install hexo-generator-search --save # 内容搜索</span><br><span class="line">npm i hexo-permalink-pinyin --save # 中文链接转英文，利于 SEO</span><br><span class="line">npm i --save hexo-wordcount # 字数统计</span><br></pre></td></tr></table></figure><p>（代码高亮好像遇到了点问题）</p><h1 id="功能设置"><a href="#功能设置" class="headerlink" title="功能设置"></a>功能设置</h1><h2 id="隐藏文章"><a href="#隐藏文章" class="headerlink" title="隐藏文章"></a>隐藏文章</h2><p>找了一圈，没看 Matery 主题下隐藏文章的教程。由于 hexo 主题的设置都很类似，我便直接在 layout 文件夹下检索 <code>page.post</code>，却发现 Matery 已经自带了隐藏文章的功能，不需要修改代码。如下图<br><img src="https://cdn.jsdelivr.net/gh/RexWzh/PicBed@picgo/picgo_folder/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20210910101227.png" alt="设置文章隐藏"></p><p>在需要隐藏的文章头部输入 <code>hide: true</code> ，则该文章不会出现在主页面。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
